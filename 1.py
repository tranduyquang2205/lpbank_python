import base64
from io import BytesIO
from PIL import Image
import pytesseract

def solve_captcha(base64_img_string):
    """
    Solves a CAPTCHA image.
    
    Args:
        base64_img_string (str): Base64-encoded image string.

    Returns:
        str: The solved CAPTCHA text.
    """
    try:
        # Decode the base64 image string to bytes
        img_data = base64.b64decode(base64_img_string)
        
        # Open the image using PIL
        img = Image.open(BytesIO(img_data))
        
        # Use pytesseract to perform OCR on the image
        captcha_text = pytesseract.image_to_string(img, config="--psm 8")  # PSM 8 assumes a single word
        return captcha_text.strip()
    
    except Exception as e:
        return f"Error solving CAPTCHA: {e}"

# Example Usage
if __name__ == "__main__":
    # Replace with your base64-encoded image string
    base64_img_string = "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"
    result = solve_captcha(base64_img_string)
    print(f"Solved CAPTCHA: {result}")
